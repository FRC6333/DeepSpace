// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6333.DeepSpace.subsystems;


//import org.usfirst.frc6333.DeepSpace.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
//import edu.wpi.first.wpilibj.PIDOutput;
//import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import org.usfirst.frc6333.DeepSpace.Robot;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Arm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_VictorSPX shoulder;
    private AnalogPotentiometer shoulderPet;
    private WPI_VictorSPX elbow;
    private AnalogPotentiometer elbowPet;
    private WPI_VictorSPX wrist;
    private Encoder wristEncoder;
    private Encoder shoulderEncoder;
    private Counter shoulderCounter;
    private Counter elbowCounter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Arm() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        //MC 5
        shoulder = new WPI_VictorSPX(5);
        shoulderPet = new AnalogPotentiometer(0);
        addChild("ShoulderPet",shoulderPet);
        shoulderEncoder = new Encoder(12, 13, false, EncodingType.k4X);
        shoulderEncoder.setDistancePerPulse(1.0);
        shoulderEncoder.setPIDSourceType(PIDSourceType.kDisplacement);

        shoulderCounter = new Counter();
        shoulderCounter.setUpSource(23);
        //shoulderCounter.setDownSource(24);
        shoulderCounter.setUpDownCounterMode();
        
        // MC6
        elbow = new WPI_VictorSPX(6);

        elbowCounter = new Counter();
        elbowCounter.setUpSource(10);
        //elbowCounter.setDownSource(11);
        elbowCounter.setUpDownCounterMode();
        
        elbowPet = new AnalogPotentiometer(1);
        addChild("ElbowPet",elbowPet);
        
        // MC7
        wrist = new WPI_VictorSPX(7);
        
        
        
        wristEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        addChild("WristEncoder",wristEncoder);
        wristEncoder.setDistancePerPulse(1.0);
        wristEncoder.setPIDSourceType(PIDSourceType.kRate);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    public void moveShoulder(double speed){
        shoulder.set(speed);
    }

    public void moveWrist(double speed){
        wrist.set(speed);
    }
    
    public void moveElbow(double speed){
        elbow.set(speed);
    }

    public void stopShoulder(){
        shoulder.set(0);
    }

    public void stopElbow(){
        elbow.set(0);
    }

    public double getElbow(){
        return elbowPet.get() * 10000;
    }

    public double getShoulder(){
        return shoulderPet.get() * 10000;
    }

    public void stopWrist(){
        wrist.set(0);
    }
    
    public int getelbowCount(){
        return elbowCounter.get();
    }
    
    public int getshoulderCount(){
        return shoulderCounter.get();
    }

    public int getShoulderEncoderCount(){
        return shoulderEncoder.get();
    }
    
    
    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("Elbow Pot: ",Robot.arm.getElbow());
        SmartDashboard.putNumber("Shoulder Pot: ",Robot.arm.getShoulder());
        
        SmartDashboard.putNumber("Elbow Counter Count: ",Robot.arm.getelbowCount());
        SmartDashboard.putNumber("Shoulder Counter Count: ",Robot.arm.getshoulderCount());

        SmartDashboard.putNumber("Shoulder Encoder Count", getShoulderEncoderCount());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

