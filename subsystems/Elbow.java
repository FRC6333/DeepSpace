// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6333.DeepSpace.subsystems;


//import org.usfirst.frc6333.DeepSpace.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.DigitalInput;
//import edu.wpi.first.wpilibj.PIDOutput;
//import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elbow extends PIDSubsystem {

    private WPI_VictorSPX elbow_motor;
    private Encoder elbowEncoder;
    private boolean Elbow_PID_Running;
    private DigitalInput Elbow_stop;

    public Elbow() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        super("elbow", 0.05, 0.02, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        getPIDController().setName("elbow", "PIDSubsystem Controller");
        LiveWindow.add(getPIDController());
       
        // MC6
        elbow_motor = new WPI_VictorSPX(6);
        addChild("ElbowMotor",elbow_motor);
        elbowEncoder = new Encoder(8,9,false,EncodingType.k4X);
        addChild("ElbowEncoder",elbowEncoder);
        elbowEncoder.setDistancePerPulse(1.0);
        elbowEncoder.setPIDSourceType(PIDSourceType.kDisplacement);

        Elbow_stop = new DigitalInput(12);
    
        Elbow_PID_Running = false;
    }

    @Override
    public void initDefaultCommand() {

        // setDefaultCommand(new MySpecialCommand());
    }
    
    @Override
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return elbowEncoder.pidGet();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    @Override
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        if (output < -0.5) {
            elbow_motor.pidWrite(-0.45); // this is an attempt to prevent elbow arm from slamming down
        } else  elbow_motor.pidWrite(output);

    }   

    public void moveElbow(double speed){
        elbow_motor.set(speed);
    }

    public void stopElbow(){
        elbow_motor.set(0);
    }
    
    public int getElbowEncoderCount() {
        return elbowEncoder.get();
    }

    public Boolean getElbowStop(){
        return Elbow_stop.get();
    }

    public void ResetElbow(){
        elbowEncoder.reset();
    }

    public void set_PID_Running(boolean value) {
        Elbow_PID_Running = value;
    }
    
    public boolean get_PID_Status() {
        return Elbow_PID_Running;
    }
   @Override
    public void periodic() {
        // Put code here to be run every loop       
        SmartDashboard.putNumber("Elbow Encoder", getElbowEncoderCount());
        SmartDashboard.putBoolean("Elbow Stop", getElbowStop());
    }

}