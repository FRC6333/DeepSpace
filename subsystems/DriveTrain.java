// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6333.DeepSpace.subsystems;

//import org.usfirst.frc6333.DeepSpace.Robot;
import org.usfirst.frc6333.DeepSpace.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
//import edu.wpi.first.wpilibj.PIDOutput;
//import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX driveTrainLeftFront;
    private WPI_TalonSRX driveTrainLeftRear;
    private WPI_TalonSRX driveTrainRightFront;
    private WPI_TalonSRX driveTrainRightRear;
    private MecanumDrive mecanumDrive;
    private Encoder leftFrontEncoder;
    private Encoder leftRearEncoder;
    private Encoder rightFrontEncoder;
    private Encoder rightRearEncoder;
    private AnalogInput rightIR;
    public AnalogInput leftIR;
    private ADXRS450_Gyro gyro;
    private double[] distSensorHold;
    private int distSensorCount;
    public double distSensorAverage;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // MC1
        driveTrainLeftFront = new WPI_TalonSRX(1);
        
        
        // MC2
        driveTrainLeftRear = new WPI_TalonSRX(2);
        
        
        // MC3
        driveTrainRightFront = new WPI_TalonSRX(3);
        
        
        // MC4
        driveTrainRightRear = new WPI_TalonSRX(4);
        
        
        
        mecanumDrive = new MecanumDrive(driveTrainLeftFront, driveTrainLeftRear,
              driveTrainRightFront, driveTrainRightRear);
        addChild("Mecanum Drive",mecanumDrive);
        mecanumDrive.setSafetyEnabled(false);
        mecanumDrive.setExpiration(0.1);
        mecanumDrive.setMaxOutput(1.0);

        
        leftFrontEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        addChild("LeftFrontEncoder",leftFrontEncoder);
        leftFrontEncoder.setDistancePerPulse(1.0);
        leftFrontEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        leftRearEncoder = new Encoder(2, 3, false, EncodingType.k4X);
        addChild("LeftRearEncoder",leftRearEncoder);
        leftRearEncoder.setDistancePerPulse(1.0);
        leftRearEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        rightFrontEncoder = new Encoder(4, 5, true, EncodingType.k4X);
        addChild("RightFrontEncoder",rightFrontEncoder);
        rightFrontEncoder.setDistancePerPulse(1.0);
        rightFrontEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        rightRearEncoder = new Encoder(6, 7, true, EncodingType.k4X);
        addChild("RightRearEncoder",rightRearEncoder);
        rightRearEncoder.setDistancePerPulse(1.0);
        rightRearEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        leftIR = new AnalogInput(1);
        rightIR = new AnalogInput(0);
        gyro = new ADXRS450_Gyro();
        gyro.reset();
        distSensorHold = new double[10];
        distSensorCount = 0;
        distSensorAverage = 0;
    
    }

    @Override
    public void initDefaultCommand() {

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
        setDefaultCommand(new DriveWithJoystick());
    }

    public void DriveFull(Joystick stick){
        double Xaxis, Yaxis, Zaxis;

        Xaxis = stick.getX();
        Yaxis = stick.getY();
        Zaxis = stick.getZ();

        if (Math.abs(Zaxis)<0.1) Zaxis=0;
        if (Math.abs(Xaxis)<0.1) Xaxis=0;
        if (Math.abs(Yaxis)<0.1) Yaxis=0;

        mecanumDrive.driveCartesian(Xaxis, -Yaxis, Zaxis/4);
        // mecanumDrive.driveCartesian(-Xaxis, Yaxis, Zaxis, gyro);
    }

    public void stop(){
        mecanumDrive.driveCartesian(0, 0, 0);
    }

    public double GetIR(int num) {
        if (num==3) return this.rightIR.getAverageValue();
        else return this.leftIR.getAverageValue();
    }

    public double getDistSensorAverage(double latestReading){
        if (distSensorCount == 9){
            distSensorCount = 0;
        }
        else{
            distSensorCount ++;
        }
        distSensorHold[distSensorCount] = latestReading;
        double total = 0;
        for (int i = 0; i<10; i++){
            total += distSensorHold[i];
        } 
        return total/10;
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("leftIR result",this.GetIR(2));
        SmartDashboard.putNumber("rightIR result", this.GetIR(3));
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

