// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6333.DeepSpace.commands;

import org.usfirst.frc6333.DeepSpace.Robot;

import edu.wpi.first.wpilibj.command.Command;
//import org.usfirst.frc6333.DeepSpace.Robot;

/**
 * This Command sets up the arm to pickup a Hatch. It has two parts.
 * The Command must check the state of the LoadStationFloor Button, then
 * set the arm to either position to pick up a hatch from the load station
 * or set the arm to pick up a hatch from the ground.
 */
public class PreHatchPickup extends Command {

    // Settings for Load Station
    private int ElbowSetpoint = 118;
    private int ShoulderSetpoint = 0;
    private int WristSetpoint = 74419;
    private int FingerSetpoint = 0;

    private boolean ElbowPID;
    private boolean ShoulderPID;
    private boolean FingerPID;
    private boolean WristPID;

    public PreHatchPickup() {

    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        setInterruptible(true);
        
        // Disable any already running commands
        Robot.elbow_sub.disable();
        Robot.fingers_sub.disable();
        Robot.shoulder_sub.disable();
        //Robot.wrist_sub.disable();

        //Button is 'set' for load station and 'unset' for floor
        if (!Robot.operatorInterface.HatchFloorOrStationButton.get()) {
            
            // Settings for floor
            ElbowSetpoint = 100;
            ShoulderSetpoint = 0;
            WristSetpoint = 74400;
            
        }   
        
        // Start moving wrist and elbow
        //Robot.wrist_sub.setSetpoint(WristSetpoint);
        //Robot.wrist_sub.enable();
        Robot.shoulder_sub.setSetpoint(ShoulderSetpoint);
        Robot.shoulder_sub.enable();
        Robot.elbow_sub.setSetpoint(ElbowSetpoint);
        Robot.elbow_sub.enable();
        ElbowPID = false;
        ShoulderPID = false;
        FingerPID = false;
        WristPID = false;
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {

        // Fingerstop is false if at zero point
        if (Robot.fingers_sub.getFingerStop()) {
                Robot.fingers_sub.moveFingers(.75);
        } else {
            Robot.fingers_sub.stopFingers();
            FingerPID = true;
        }

        if (Math.abs(ShoulderSetpoint-Robot.shoulder_sub.getShoulderEncoderCount())<20) {
            Robot.shoulder_sub.disable();
            ShoulderPID = true;

            Robot.wrist_sub.setSetpoint(WristSetpoint);
            Robot.wrist_sub.enable();
            }
    
        if (Math.abs(ElbowSetpoint-Robot.elbow_sub.getElbowEncoderCount())<20) {
            Robot.elbow_sub.disable();
            ElbowPID=true;
            
            //Robot.shoulder_sub.setSetpoint(ShoulderSetpoint);
            //Robot.shoulder_sub.enable();

    
        }
        if (Math.abs(WristSetpoint-Robot.wrist_sub.getEncoder())<2000) {
           // Robot.wrist_sub.disable();
            WristPID=true;
            
            //Robot.shoulder_sub.setSetpoint(ShoulderSetpoint);
            //Robot.shoulder_sub.enable();

    
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {

        if (ShoulderPID && ElbowPID && FingerPID & WristPID) {
            return true;
        }
        else return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {

        Robot.shoulder_sub.disable();
        Robot.elbow_sub.disable();
        //Robot.fingers_sub.ResetFingers();
        Robot.fingers_sub.stopFingers();
        System.out.print("Complete PreHatchPickup Command\n");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
